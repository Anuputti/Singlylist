#include<stdio.h>
#include<stdlib.h>
int choice, count=0;
struct node
{
int data;
struct node *next;
}*head,*newnode,*temp;

void create();
void display();
void insert_at_begin();
void insert_at_end();
void insert_at_pos();
void delete_at_begin();
void delete_at_end();
void delete_at_pos();

void main()
{
head=0; choice=1;
printf("1.create\n2.display\n 3.insert at begin\n4.insert at end\5.insert at position\n6. delete at begin\n7.delete at end\n8.delete at position\n9.EXIT\n");
while(choice)
{
printf("Enter your choice:\n ");
scanf("%d",&choice);
switch(choice)
{
case 1: create();break;
case 2: display(); break;
case 3: insert_at_begin() ; break;
case 4: insert_at_end(); break;
case 5: insert_at_pos(); break;
case 6: delete_at_begin(); break;
case 7: delete_at_end(); break;
case 8: delete_at_pos(); break;
case 9: exit(0);
default: printf("Invalid choice\n"); break;
}
}
}
void create()
{
choice=1;
while(choice){
newnode=(struct node *)malloc(sizeof(struct node));
printf("Enter the value of newnode:\n");
scanf("%d",&newnode->data);
newnode->next=0;
if(head==0)
{
head=temp=newnode;
}
else
{
temp->next=newnode;
temp=newnode;
}
printf("Do you want to continue press 1 else 0:\n");
scanf("%d",&choice);
}
choice=1;
}
void display()
{
temp=head;
while (temp!=0)
{
printf("%d\n",temp->data);
temp=temp->next;
count++;
}
}
void insert_at_begin()
{
newnode=(struct node *)malloc(sizeof(struct node));
printf("Enter the value for newnode\n");
scanf("%d",&newnode->data);
newnode->next=head;
head=newnode;
}
void insert_at_end()
{
newnode=(struct node *)malloc(sizeof(struct node));
printf("Enter the value for newnode:\n");
scanf("%d",&newnode->data);
newnode->next=0;
temp=head;
while(temp->next!=0)
{
temp=temp->next;
}
temp->next=newnode;
temp=newnode;
}

void insert_at_pos()
{
int pos,i=1;
printf("Enter the position:\n");
scanf("%d",&pos);
if(pos>count)
{
printf("Inavlid pos\n");
}
else
{
newnode=(struct node *)malloc(sizeof(struct node));
printf("Enter the value:\n");
scanf("%d",&newnode->data);
temp=head;
while(i<pos)
{
temp=temp->next;
i++;
}
newnode->next=temp->next;
temp->next=newnode;
}
}
void delete_at_begin()
{
temp=head;
head=head->next;
free(temp);
}
void delete_at_end()
{
struct node *prevnode;
temp=head;
while(temp->next!=0)
{
prevnode=temp;
temp=temp->next;
}
if(temp==head)
{
head=0;
}
else
{
prevnode->next=0;
}
free(temp);
}
void delete_at_pos()
{
struct node *nextnode;
int pos,i=1;
printf("Enter a pos:\n");
scanf("%d",&pos);
temp=head;
while(i<pos-1)
{
temp=temp->next;
i++;
}
nextnode=temp->next;
temp->next=nextnode->next;
free(nextnode);
}